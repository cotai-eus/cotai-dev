version: '3.8'

services:
  # Nginx Load Balancer and SSL Termination
  nginx:
    image: nginx:alpine
    container_name: cotai-nginx
    restart: always
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/logs:/var/log/nginx
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./docker/nginx/certbot/conf:/etc/letsencrypt
      - ./docker/nginx/certbot/www:/var/www/certbot
      - backend-static:/usr/share/nginx/html/static
      - backend-media:/usr/share/nginx/html/media
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - frontend
      - backend
      
  # Certbot for SSL certificate renewal
  certbot:
    image: certbot/certbot
    container_name: cotai-certbot
    volumes:
      - ./docker/nginx/certbot/conf:/etc/letsencrypt
      - ./docker/nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Backend service - scaled
  backend:
    build:
      context: ./backend
      target: production
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - backend-media:/app/media
      - backend-static:/app/static
      - backend-data:/app/data
    env_file:
      - .env.production
    depends_on:
      postgres-master:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
      - database-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend service
  frontend:
    build:
      context: ./frontend
      target: production
    deploy:
      replicas: 2
    restart: always
    env_file:
      - .env.production
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Primary
  postgres-master:
    image: postgres:15-alpine
    container_name: cotai-postgres-master
    restart: always
    volumes:
      - postgres-master-data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/primary:/docker-entrypoint-initdb.d
    env_file:
      - .env.production
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      
  # PostgreSQL Replica for read operations and failover
  postgres-replica:
    image: postgres:15-alpine
    container_name: cotai-postgres-replica
    restart: always
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/replica:/docker-entrypoint-initdb.d
    env_file:
      - .env.production
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - postgres-master

  # MongoDB
  mongodb:
    image: mongo:6
    container_name: cotai-mongodb
    restart: always
    volumes:
      - mongodb-data:/data/db
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf
    env_file:
      - .env.production
    command: --config /etc/mongod.conf
    networks:
      - database-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      
  # MongoDB initialization
  mongodb-init:
    image: mongo:6
    container_name: cotai-mongodb-init
    restart: on-failure
    volumes:
      - ./docker/scripts/init_mongodb.sh:/init_mongodb.sh
    env_file:
      - .env.production
    entrypoint: ["/init_mongodb.sh"]
    networks:
      - database-network
    depends_on:
      - mongodb

  # Redis cluster
  redis:
    image: redis:7-alpine
    container_name: cotai-redis
    restart: always
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    env_file:
      - .env.production
    networks:
      - database-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  # Celery worker scaled for production
  celery-worker:
    build:
      context: ./backend
      target: production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    restart: always
    command: celery -A worker worker --loglevel=info
    volumes:
      - backend-media:/app/media
      - backend-data:/app/data
    env_file:
      - .env.production
    depends_on:
      - redis
      - postgres-master
      - mongodb
    networks:
      - backend-network
      - database-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      target: production
    container_name: cotai-celery-beat
    restart: always
    command: celery -A worker beat --loglevel=info
    volumes:
      - backend-data:/app/data
    env_file:
      - .env.production
    depends_on:
      - redis
      - celery-worker
    networks:
      - backend-network
      - database-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup service
  backup-service:
    image: postgres:15-alpine
    container_name: cotai-backup
    volumes:
      - ./docker/backups:/backups
      - ./docker/scripts:/scripts
    env_file:
      - .env.production
    networks:
      - database-network
    depends_on:
      - postgres-master
      - mongodb
    command: /scripts/backup.sh
    restart: always

  # PostgreSQL monitoring service
  pg-monitor:
    image: postgres:15-alpine
    container_name: cotai-pg-monitor
    restart: always
    volumes:
      - ./docker/scripts/pg_monitor.sh:/pg_monitor.sh
    env_file:
      - .env.production
    command: /pg_monitor.sh
    networks:
      - database-network
    depends_on:
      - postgres-master
      - postgres-replica
      
  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cotai-prometheus
    restart: always
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cotai-grafana
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: cotai-node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: cotai-loki
    restart: always
    volumes:
      - ./docker/loki/config.yaml:/etc/loki/config.yaml
      - loki-data:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yaml
    networks:
      - monitoring-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: cotai-promtail
    restart: always
    volumes:
      - ./docker/promtail/config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log
      - ./docker/nginx/logs:/var/log/nginx
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - monitoring-network
    depends_on:
      - loki

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  database-network:
    driver: bridge
    internal: true  # Database only accessible internally
  monitoring-network:
    driver: bridge

volumes:
  postgres-master-data:
  postgres-replica-data:
  mongodb-data:
  redis-data:
  backend-media:
  backend-static:
  backend-data:
  prometheus-data:
  grafana-data:
  loki-data: