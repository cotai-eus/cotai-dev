version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      target: ${BACKEND_TARGET:-development}
    container_name: cotai-backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - backend-media:/app/media
      - backend-static:/app/static
      - backend-data:/app/data
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
      - database-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      target: ${FRONTEND_TARGET:-development}
    container_name: cotai-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
    ports:
      - "3000:3000"
      - "80:80"
    depends_on:
      - backend
    networks:
      - frontend-network
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${FRONTEND_PORT:-3000}/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: cotai-postgres
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    env_file:
      - .env
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"

  # MongoDB database
  mongodb:
    image: mongo:6
    container_name: cotai-mongodb
    restart: unless-stopped
    volumes:
      - mongodb-data:/data/db
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf
    env_file:
      - .env
    command: --config /etc/mongod.conf
    networks:
      - database-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: cotai-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    env_file:
      - .env
    networks:
      - database-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
      
  # Celery worker para processamento assíncrono
  celery-worker:
    build:
      context: ./backend
      target: ${BACKEND_TARGET:-development}
    container_name: cotai-celery-worker
    restart: unless-stopped
    command: celery -A worker worker --loglevel=info
    volumes:
      - ./backend:/app
      - backend-media:/app/media
      - backend-data:/app/data
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
      - mongodb
    networks:
      - backend-network
      - database-network

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  database-network:
    driver: bridge
    internal: true  # Banco de dados só acessível internamente

volumes:
  postgres-data:
  mongodb-data:
  redis-data:
  backend-media:
  backend-static:
  backend-data:  # Para armazenar documentos processados
